{"version":3,"sources":["components/Card.js","components/CardList.js","components/Search.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","className","alt","src","CardList","robots","cardArray","map","robo","index","key","Search","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filterRobo","filter","robot","toLowerCase","includes","length","color","fontFamily","letterSpacing","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+NAiBeA,EAdJ,SAAC,GACX,IADYC,EACb,EADaA,GAAGC,EAChB,EADgBA,KAGf,OACE,yBAAKC,UAAU,qDACd,yBAAKC,IAAI,cAAcC,IAAG,+BAA0BJ,EAA1B,YAC1B,6BACC,4BAAKA,GACL,2BAAIC,MCKMI,EAZA,SAAC,GACf,IADgBC,EACjB,EADiBA,OAEVC,EAAUD,EAAOE,KAAI,SAACC,EAAKC,GAChC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAOV,GAAIM,EAAOI,GAAOV,GAAIC,KAAMK,EAAOI,GAAOT,UAEnE,OACD,6BACEM,ICMYK,EAfF,SAAC,GAA8B,EAA7BC,YAA8B,IAAjBC,EAAgB,EAAhBA,aAC3B,OAEC,yBAAKZ,UAAU,OACd,2BAAOA,UAAU,iCACjBa,KAAK,SACLC,YAAY,kBACZC,SAAUH,MCEEI,EATF,SAACC,GACb,OACE,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,UACtCH,EAAMI,WC4DKC,E,YAzDd,aAAc,IAAD,8BACZ,+CAmBDC,eAAe,SAACC,GAEf,EAAKC,SAAS,CAAEd,YAAaa,EAAME,OAAOC,SApB1C,EAAKC,MAAM,CACVxB,OAAQ,GAERO,YAAa,IALF,E,iFASO,IAAD,OAElBkB,MAAM,8CAEJC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAExBF,MAAK,SAAAG,GAAQ,EAAKR,SAAS,CAACrB,OAAO6B,S,+BAW5B,IAAD,EAEsBC,KAAKN,MAA3BxB,EAFA,EAEAA,OAAQO,EAFR,EAEQA,YAETwB,EAAW/B,EAAOgC,QAAO,SAAAC,GAC/B,OAAOA,EAAMtC,KAAKuC,cAAcC,SAAS5B,EAAY2B,kBAGrD,OAAKlC,EAAOoC,OAOV,yBAAKxC,UAAU,MACd,wBAAIkB,MAAQ,CAACuB,MAAO,UACpBC,WAAY,SACZC,cAAc,QAFd,UAKA,kBAAC,EAAD,CAAQ/B,aAAcsB,KAAKX,iBAC3B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUnB,OAAQ+B,MAbd,wBAAIjB,MAAQ,CAACuB,MAAO,YAApB,oC,GAtCOG,aCMCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3b486b92.chunk.js","sourcesContent":["import React from 'react';\r\n// import robots from './robots';\r\n\r\nconst Card=({id,name})=>\r\n{\r\n\t\r\n\treturn (\r\n\t\t\t<div className='tc bg-light-red dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t\t<img alt='robo-friend' src={`https://robohash.org/${id}?50x50`} />\r\n\t\t\t\t<div>\t\r\n\t\t\t\t\t<h2>{id}</h2>\r\n\t\t\t\t\t<p>{name}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t);\r\n};\r\n\r\nexport default Card;\r\n\r\n\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList=({robots})=>\r\n{\r\n\tconst cardArray=robots.map((robo,index)=>{\r\n\t\treturn <Card key={index} id={robots[index].id} name={robots[index].name}/>\r\n\t})\t\r\n  return(\r\n\t<div>\r\n\t\t{cardArray}\r\n\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Search=({searchField, searchChange})=>{\r\n\treturn (\r\n\r\n\t\t<div className='pa1'>\t\t\r\n\t\t\t<input className='pa3 ba b--red bg-lightest-blue'\r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='search robos...'\r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n\treturn (\r\n\t\t\t<div style={{overflowY:'scroll', height:'446px'}}>\r\n\t\t\t\t{props.children}\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Scroll;"," import React, {Component} from 'react';\r\n import Cardlist from '../components/CardList';\t//  '../' means just outside this file's parent folder\r\n // import {robots} from '../robots';\t\t\t//  whereas './' means same parent folder as this file's\r\n import Search from '../components/Search';\r\n import Scroll from '../components/Scroll';\r\n\r\n class App extends Component{\r\n\r\n \tconstructor(){\r\n \t\tsuper()\r\n \t\tthis.state={\r\n \t\t\trobots: [],\r\n \t\t\t// robots:robots,\r\n \t\t\tsearchField: ''\r\n \t\t}\r\n \t}\t\r\n\r\n \tcomponentDidMount(){\r\n\r\n \t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\r\n \t\t\t.then(response=>response.json())\r\n\r\n \t\t\t.then(users=>{this.setState({robots:users})});\r\n \t\r\n \t}\r\n\r\n\r\n \tonSearchChange=(event)=>{\r\n \t\t// console.log(event.target.value);\r\n \t\tthis.setState({ searchField: event.target.value})\r\n \t\t\r\n \t}\r\n\r\n \t\trender(){\r\n \t\t\t\r\n \t\t\tconst {robots, searchField }=this.state;\r\n\r\n \t\t\tconst filterRobo=robots.filter(robot=>{\r\n \t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase()); \t\t\t\r\n \t\t\t})\r\n\r\n \t\t\tif (!robots.length)\r\n \t\t\t{\r\n \t\t\t\treturn <h1 style ={{color: '#a1a1a1'}}>Please wait while we load...</h1>\r\n \t\t\t}\r\n \t\t\t\r\n \t\t\telse    { \r\n \t\t\t\treturn (\r\n\t\t \t\t\t<div className='tc'>\r\n\t\t \t\t\t\t<h1 style ={{color: '#a1a1a1', \r\n\t\t \t\t\t\tfontFamily: 'Roboto',\r\n\t\t \t\t\t\tletterSpacing:'5px'}}>\r\n\t\t \t\t\t\t\tROBOTS\r\n\t\t \t\t\t\t</h1>\r\n\t\t \t\t\t\t<Search searchChange={this.onSearchChange}/>\r\n\t\t \t\t\t\t<Scroll>\r\n\t\t \t\t\t\t\t<Cardlist robots={filterRobo}/>\r\n\t\t \t\t\t\t</Scroll>\r\n\t\t \t\t\t</div>\r\n\t\t\t\t\t\t);\r\n \t\t\t\t    } \t\r\n \t\t\t\t}\r\n }\r\n\r\n export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import CardList from './CardList';\n// import Card from './Card';\n// import { robots } from './robots';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport './tachyons';\n\nReactDOM.render(\n\t\t\t\t<App/>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}